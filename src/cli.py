import pandas as pd
from crud_operations import add_animal, get_all_animals, get_all_species, get_animal_by_attribute
from database import init_db, delete_db
import time

class CLI:
    def __init__(self):
        """Alustetaan CLI"""
        self.running = True
        init_db()
    
    def show_menu(self):
        print("\nüêæ Animal Logger - Kotitilan el√§inkirjanpito üêæ")
        print("1Ô∏è‚É£ Lis√§√§ uusi el√§in")
        print("2Ô∏è‚É£ N√§yt√§ kaikki el√§imet")
        print("3Ô∏è‚É£ Hae el√§in nimen tai ID:n perusteella")
        print("4Ô∏è‚É£ P√§ivit√§ el√§imen tiedot")
        print("5Ô∏è‚É£ Poista el√§in")
        print("6Ô∏è‚É£ Lis√§√§ ratsastustunti")
        print("0Ô∏è‚É£ Poistu")

    
    def add_animal_flow(self):
        species = ["horse", "dog", "cat", "sheep"]
        """K√§ytt√§j√§n sy√∂tteet uuden el√§imen lis√§√§miseen"""
        name = input("Nimi: ")
        index = int(input("(1) Hevonen, (2) Koira, (3) Kissa, (4) Lammas: "))
        breed = input("Rotu (valinnainen): ")
        birth_date = input("El√§imen arvioitu syntym√§aika (YYYY-MM-DD, valinnainen): ")

        animal_id = add_animal(name, species[index - 1], breed, birth_date)
        print(f"‚úÖ Added animal ID: {animal_id}) into a database!")
    
    def get_all_animals_flow(self):
        data = get_all_animals()
        df = pd.DataFrame(data)
        print(df)
        input("\n" + "Jatka painamalla n√§pp√§int√§..." + "\n")
    
    
    def get_animal_by_attr_flow(self):
        input_attr = input("Anna el√§imen nimi tai ID: ")
        animal = get_animal_by_attribute(input_attr)
        if animal:
            print()
            df = pd.DataFrame([animal])
            print(df)
        else:
            print("El√§int√§ ei l√∂ytynyt!")
        input("\n" + "Jatka painamalla n√§pp√§int√§...")

    def add_lesson_flow(self):
        print()
        horses = get_all_species('Kissa')
        print(horses)
        
    
    def delete_and_init_db_flow(self):
        print("Pyyhit√§√§n tietokanta...")
        time.sleep(0.5)
        delete_db()
        print("Tietokanta pyyhitty! (1/2)")
        print("Alustetaan tietokanta...")
        time.sleep(0.5)
        init_db()
        print("Tietokanta alustettu! (2/2)")
        time.sleep(1)



    def run(self):
        """K√§ytt√∂silmukka"""
        while self.running:
            self.show_menu()
            choice = input("\n‚ö° Valitse toiminto: ")

            if choice == "1":
                print('\n' + 'LIS√Ñ√Ñ UUSI EL√ÑIN:')
                self.add_animal_flow() 
            elif choice == "2":
                print()
                self.get_all_animals_flow()
            elif choice == "3":
                print()
                self.get_animal_by_attr_flow()
            elif choice == "6":
                print()
                self.add_lesson_flow()
            elif choice == "x":
                print()
                confirm = input("Pyyhit√§√§nk√∂ tietokanta? (K/e) ")
                if confirm == "K":
                    self.delete_and_init_db_flow()
                elif confirm.lower() == "e":
                    pass
                
                

            elif choice == "0":
                print("üëã Suljetaan sovellus...")
                self.running = False
            else:
                print("‚ùå Virheellinen valinta, yrit√§ uudelleen.")
    

if __name__ == "__main__":
    cli = CLI()
    cli.run()